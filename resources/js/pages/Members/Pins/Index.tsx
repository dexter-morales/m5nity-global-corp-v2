import React from "react";
import { Head } from "@inertiajs/react";
import AppLayout from "@/layouts/app-layout";

type PinRecord = {
    id: number;
    trans_no: string;
    payment_method?: string | null;
    member_email: string;
    pin: string;
    status: string;
    created_at?: string | null;
    new_member_name?: string | null;
};

interface Props {
    pins: PinRecord[];
    message?: string | null;
}

const PinsIndex: React.FC<Props> = ({ pins, message }) => {
    return (
        <AppLayout
        // header={
        //     <h2 className="text-xl font-semibold leading-tight text-gray-800">
        //         Members
        //     </h2>
        // }
        >
            {" "}
            <div className="space-y-6 p-6">
                <Head title="Registration Pins" />

                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-semibold text-slate-800">
                        Member Registration Pins
                    </h1>
                    <p className="text-sm text-slate-500">
                        Review the pins generated by your cashier team.
                    </p>
                </div>

                {message && (
                    <div className="rounded-lg border border-yellow-300 bg-yellow-50 px-4 py-3 text-sm text-yellow-800">
                        {message}
                    </div>
                )}

                <div className="rounded-xl border border-slate-200 bg-white shadow-sm">
                    <div className="border-b border-slate-200 px-6 py-4">
                        <h2 className="text-lg font-semibold text-slate-700">
                            Available Pins
                        </h2>
                        <p className="text-sm text-slate-500">
                            Pins marked as{" "}
                            <span className="font-semibold">unused</span> are
                            ready to be assigned during member registration.
                        </p>
                    </div>

                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-slate-200 text-sm">
                            <thead className="bg-slate-50 text-left text-xs font-semibold uppercase tracking-wider text-slate-500">
                                <tr>
                                    <th className="px-4 py-3">
                                        Transaction No.
                                    </th>
                                    <th className="px-4 py-3">PIN</th>
                                    <th className="px-4 py-3">
                                        Payment Method
                                    </th>
                                    <th className="px-4 py-3">Member Email</th>
                                    <th className="px-4 py-3">Reserved For</th>
                                    <th className="px-4 py-3">Status</th>
                                    <th className="px-4 py-3">Created</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-100">
                                {pins.length ? (
                                    pins.map((pin) => (
                                        <tr
                                            key={pin.id}
                                            className="hover:bg-slate-50"
                                        >
                                            <td className="px-4 py-3 font-medium text-slate-700">
                                                {pin.trans_no}
                                            </td>
                                            <td className="px-4 py-3 font-mono text-slate-800">
                                                {pin.pin}
                                            </td>
                                            <td className="px-4 py-3 text-slate-600">
                                                {pin.payment_method ?? '-'}
                                            </td>
                                            <td className="px-4 py-3 text-slate-600">
                                                {pin.member_email}
                                            </td>
                                            <td className="px-4 py-3 text-slate-600">
                                                {pin.new_member_name ??
                                                    "Pending"}
                                            </td>
                                            <td className="px-4 py-3">
                                                <StatusPill
                                                    status={pin.status}
                                                />
                                            </td>
                                            <td className="px-4 py-3 text-slate-500">
                                                {pin.created_at
                                                    ? new Date(
                                                          pin.created_at
                                                      ).toLocaleString()
                                                    : '-'}
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td
                                            colSpan={7}
                                            className="px-4 py-6 text-center text-slate-400"
                                        >
                                            No registration pins recorded yet.
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
};

const StatusPill: React.FC<{ status: string }> = ({ status }) => {
    const normalized = status.toLowerCase();
    let styles = "bg-slate-100 text-slate-700 border border-slate-200";

    if (normalized === "unused") {
        styles = "bg-emerald-50 text-emerald-700 border border-emerald-200";
    } else if (normalized === "used") {
        styles = "bg-blue-50 text-blue-700 border border-blue-200";
    } else if (normalized === "expired") {
        styles = "bg-red-50 text-red-600 border border-red-200";
    }

    return (
        <span
            className={`inline-flex rounded-full px-3 py-1 text-xs font-semibold ${styles}`}
        >
            {status.toUpperCase()}
        </span>
    );
};

export default PinsIndex;
