import React from "react";
import membersRoutes from "@/routes/members";
import { useServerTableControls } from "@/components/data-table/use-server-table";
import MemberDataTablePage, {
    type MemberDataTableColumn,
    type SortButtonConfig,
} from "@/components/members/member-data-table-page";
import { cn } from "@/lib/utils";
import type { Paginated } from "@/types";

type PinRecord = {
    id: number;
    trans_no: string;
    payment_method?: string | null;
    member_email: string;
    pin: string;
    status: string;
    created_at?: string | null;
    new_member_name?: string | null;
};

interface Props {
    pins: Paginated<PinRecord>;
    message?: string | null;
    filters?: {
        search?: string;
        sort?: string;
        direction?: "asc" | "desc";
    };
}

const PinsIndex: React.FC<Props> = ({ pins, message, filters = {} }) => {
    const { searchTerm, setSearchTerm, toggleSort, sortIndicator } =
        useServerTableControls({
            route: membersRoutes.pins.url(),
            filters,
            defaultSort: "created_at",
            defaultDirection: "desc",
        });

    const formatDate = (value?: string | null) =>
        value ? new Date(value).toLocaleString() : "-";

    const columns: MemberDataTableColumn<PinRecord>[] = [
        {
            key: "trans_no",
            header: "Transaction No.",
            cellClassName: "font-medium text-slate-700",
            render: (pin) => pin.trans_no,
        },
        {
            key: "pin",
            header: "PIN",
            cellClassName: "font-mono text-slate-800",
            render: (pin) => pin.pin,
        },
        {
            key: "payment_method",
            header: "Payment Method",
            cellClassName: "text-slate-600",
            render: (pin) => pin.payment_method ?? "-",
        },
        {
            key: "member_email",
            header: "Member Email",
            cellClassName: "text-slate-600",
            render: (pin) => pin.member_email,
        },
        {
            key: "new_member_name",
            header: "Reserved For",
            cellClassName: "text-slate-600",
            render: (pin) => pin.new_member_name ?? "Pending",
        },
        {
            key: "status",
            header: "Status",
            render: (pin) => <StatusPill status={pin.status} />,
        },
        {
            key: "created_at",
            header: "Created",
            cellClassName: "text-slate-500",
            render: (pin) => (pin.created_at ? formatDate(pin.created_at) : "-"),
        },
    ];

    const sortButtons: SortButtonConfig[] = [
        {
            key: "created_at",
            label: "Created",
            onClick: () => toggleSort("created_at"),
            isActive: (filters.sort ?? "created_at") === "created_at",
            indicator: sortIndicator("created_at"),
        },
        {
            key: "trans_no",
            label: "Transaction",
            onClick: () => toggleSort("trans_no"),
            isActive: filters.sort === "trans_no",
            indicator: sortIndicator("trans_no"),
        },
        {
            key: "status",
            label: "Status",
            onClick: () => toggleSort("status"),
            isActive: filters.sort === "status",
            indicator: sortIndicator("status"),
        },
    ];

    return (
        <MemberDataTablePage
            headTitle="Registration Pins"
            pageTitle="Member Registration Pins"
            pageDescription="Review the pins generated by your cashier team."
            searchValue={searchTerm}
            onSearchChange={setSearchTerm}
            searchPlaceholder="Search by transaction, email, status..."
            message={message}
            tableTitle="Available Pins"
            tableDescription={() => (
                <p>
                    Pins marked as <span className="font-semibold">unused</span> are ready to be
                    assigned during member registration.
                </p>
            )}
            sortButtons={sortButtons}
            paginated={pins}
            emptyMessage="No registration pins recorded yet."
            totalLabel="pins"
            getRowKey={(pin) => pin.id}
            columns={columns}
        />
    );
};

const StatusPill: React.FC<{ status: string }> = ({ status }) => {
    const normalized = status.toLowerCase();
    let tone = "bg-slate-100 text-slate-700 border border-slate-200";

    if (normalized === "unused") {
        tone = "bg-emerald-50 text-emerald-700 border border-emerald-200";
    } else if (normalized === "used") {
        tone = "bg-blue-50 text-blue-700 border border-blue-200";
    } else if (normalized === "expired") {
        tone = "bg-red-50 text-red-600 border border-red-200";
    }

    return (
        <span className={cn("inline-flex rounded-full px-3 py-1 text-xs font-semibold", tone)}>
            {status.toUpperCase()}
        </span>
    );
};

export default PinsIndex;
